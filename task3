import java.util.ArrayList;
import java.util.Scanner;

// Main class for the banking system
public class BankingSystem {
    static ArrayList<Account> accounts = new ArrayList<>();
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("\n--- Welcome to Online Banking System ---");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit Funds");
            System.out.println("3. Withdraw Funds");
            System.out.println("4. Transfer Money");
            System.out.println("5. View Transaction History");
            System.out.println("6. Manage Personal Information");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    createAccount();
                    break;
                case 2:
                    depositFunds();
                    break;
                case 3:
                    withdrawFunds();
                    break;
                case 4:
                    transferFunds();
                    break;
                case 5:
                    viewTransactionHistory();
                    break;
                case 6:
                    managePersonalInformation();
                    break;
                case 7:
                    System.out.println("Exiting the system. Thank you!");
                    return;
                default:
                    System.out.println("Invalid option, please try again.");
            }
        }
    }

    // Create a new account
    private static void createAccount() {
        System.out.print("Enter your name: ");
        scanner.nextLine();
        String name = scanner.nextLine();
        System.out.print("Enter initial deposit amount: ");
        double initialDeposit = scanner.nextDouble();

        Account account = new Account(name, initialDeposit);
        accounts.add(account);

        System.out.println("Account created successfully! Your account number is: " + account.getAccountNumber());
    }

    // Deposit funds into an account
    private static void depositFunds() {
        Account account = getAccount();
        if (account != null) {
            System.out.print("Enter deposit amount: ");
            double amount = scanner.nextDouble();
            account.deposit(amount);
        }
    }

    // Withdraw funds from an account
    private static void withdrawFunds() {
        Account account = getAccount();
        if (account != null) {
            System.out.print("Enter withdrawal amount: ");
            double amount = scanner.nextDouble();
            account.withdraw(amount);
        }
    }

    // Transfer funds between two accounts
    private static void transferFunds() {
        System.out.print("Enter your account number: ");
        Account fromAccount = getAccount();
        if (fromAccount != null) {
            System.out.print("Enter recipient's account number: ");
            Account toAccount = getAccount();
            if (toAccount != null && !fromAccount.equals(toAccount)) {
                System.out.print("Enter transfer amount: ");
                double amount = scanner.nextDouble();
                fromAccount.transfer(toAccount, amount);
            } else {
                System.out.println("Cannot transfer to the same account.");
            }
        }
    }

    // View transaction history of an account
    private static void viewTransactionHistory() {
        Account account = getAccount();
        if (account != null) {
            account.printTransactionHistory();
        }
    }

    // Manage personal information (change name)
    private static void managePersonalInformation() {
        Account account = getAccount();
        if (account != null) {
            System.out.print("Enter your new name: ");
            scanner.nextLine();
            String newName = scanner.nextLine();
            account.setAccountHolder(newName);
            System.out.println("Name updated successfully.");
        }
    }

    // Retrieve account by account number
    private static Account getAccount() {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        for (Account account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                return account;
            }
        }
        System.out.println("Account not found.");
        return null;
    }
}

// Account class with functionalities
class Account {
    private static int accountCounter = 4700;
    private int accountNumber;
    private String accountHolder;
    private double balance;
    private ArrayList<String> transactionHistory = new ArrayList<>();

    public Account(String accountHolder, double initialDeposit) {
        this.accountHolder = accountHolder;
        this.balance = initialDeposit;
        this.accountNumber = accountCounter++;
        transactionHistory.add("Account created with initial deposit: Rs" + initialDeposit);
    }

    public int getAccountNumber() {
        return accountNumber;
    }

    public void setAccountHolder(String accountHolder) {
        this.accountHolder = accountHolder;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            transactionHistory.add("Deposited: Rs" + amount);
            System.out.println("Deposit successful. New balance: Rs" + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            transactionHistory.add("Withdrew: Rs" + amount);
            System.out.println("Withdrawal successful. New balance: Rs" + balance);
        } else {
            System.out.println("Invalid or insufficient funds.");
        }
    }

    public void transfer(Account toAccount, double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            toAccount.balance += amount;
            transactionHistory.add("Transferred: Rs" + amount + " to account " + toAccount.getAccountNumber());
            toAccount.transactionHistory.add("Received: Rs" + amount + " from account " + this.accountNumber);
            System.out.println("Transfer successful. New balance: Rs" + balance);
        } else {
            System.out.println("Invalid or insufficient funds.");
        }
    }

    public void printTransactionHistory() {
        System.out.println("Transaction history for account " + accountNumber + ":");
        for (String transaction : transactionHistory) {
            System.out.println(transaction);
        }
    }
}
